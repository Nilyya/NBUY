// <auto-generated />
using System;
using DiariesFood.Data.Concrete.EfCore.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DiariesFood.Data.Migrations
{
    [DbContext(typeof(DiariesFoodContext))]
    partial class DiariesFoodContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.2");

            modelBuilder.Entity("DiariesFood.Entity.Concrete.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Et Tarifleri",
                            Name = "Et",
                            Url = "et"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Fast Food Tarifleri",
                            Name = "Fast Food",
                            Url = "fast-food"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Hamur İşi Tarifleri",
                            Name = "Hamur İşi",
                            Url = "hamur-isi"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Pilav,Makarna ve Rissotto Tarifleri",
                            Name = "Pilav,Makarna ve Rissotto",
                            Url = "pilav-makarna-rissoto"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Meze Tarifleri",
                            Name = "Meze",
                            Url = "meze"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Sos ve Krema Tarifleri",
                            Name = "Sos ve Krema",
                            Url = "sos-ve-krema"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Çorba Tarifleri",
                            Name = "Çorba",
                            Url = "corba"
                        },
                        new
                        {
                            Id = 8,
                            Description = "içecek Tarifleri",
                            Name = "İçecek",
                            Url = "icecek"
                        });
                });

            modelBuilder.Entity("DiariesFood.Entity.Concrete.Favorite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Favorites");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            UserId = "847c7a42-4720-4ade-ac48-c455ccb61e09"
                        },
                        new
                        {
                            Id = 2,
                            UserId = "e76c39fd-3963-4d01-bb75-306a486d613e"
                        });
                });

            modelBuilder.Entity("DiariesFood.Entity.Concrete.FavoriteItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("FavoriteId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FavortiteNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FoodId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FavoriteId");

                    b.HasIndex("FoodId");

                    b.ToTable("FavoriteItems");
                });

            modelBuilder.Entity("DiariesFood.Entity.Concrete.Food", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BakingTime")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("CatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Clue")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsHome")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Preparation")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PreparationTime")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Repice")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Service")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Foods", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BakingTime = "60 Dk",
                            CatId = 1,
                            Clue = "*Kavurma Kurban Etinin Neresinden Yapılır? Kavurma, koyun ve kuzu etinin but ve kol kısmından, dana etinin ise sırt ve kol-kürek kısmından hazırlanır.\r\n*Kuyruk yağı yerine sıvı yağ kullanabilirsiniz.\r\n*Dilerseniz kavurmanızı soğanlı da yapabilirsiniz. Soğanları etleri kavurma esnasında ekleyebilirsiniz.\r\n*Dilerseniz baharat çeşitlerini ve seviyesini tadarak arttırabilirsiniz.\r\n*Mümkünse kurban etini 2-3 gün kadar +4°C’de dinlendirin.\r\n*Kurban Eti Yıkanır mı? Kurban etini hemen kullanacaksanız eğer bol suda güzelce yıkayıp süzdürmeyi ihmal etmeyin.\r\n*Tuz etin sertleşmesine sebep olduğu için tüm baharatları et piştikten sonra eklemeye özen gösterin.",
                            ImageUrl = "kavurma.jpeg",
                            IsApproved = false,
                            IsHome = false,
                            Name = "Kurban Eti Kavurması",
                            Preparation = "1\r\nGeniş bir tencereye ince doğranmış kuyruk yağını ekleyip kavurmaya başlayın.\r\n2\r\nYağ erimeye başladığında kuşbaşı doğranmış kuzu etlerini tencereye ekleyin. Etler suyunu çekip salana kadar yüksek ateşte kavurmaya devam edin.\r\n3\r\nDaha sonra kısık ateşe alın. Üzeri kızarıp kahverengi bir görünüm alıncaya ve tamamen suyunu çekinceye kadar kapağı kapalı şekilde pişmeye bırakın. Pişme esnasında ara ara karıştırmayı ihmal etmeyin.\r\n4\r\nEtler yumuşayıp piştikten sonra; tuz, karabiber, kimyon, kekik, pul biber gibi dilediğiniz baharatlarla etinizi lezzetlendirip güzelce karıştırın.\r\n5\r\nOcaktan aldığınız kavurmayı, kendi tenceresinde kapağı kapalı olarak yaklaşık 10 dakika dinlendirdikten sonra sıcak olarak servis edebilirsiniz.",
                            PreparationTime = "2-3 Gün",
                            Repice = "200 g kuyruk yağı\r\n1 kg kuşbaşı kuzu eti\r\nyeteri kadar tuz\r\nyeteri kadar karabiber\r\ntercihen kimyon\r\ntercihen kekik\r\ntercihen pul biber",
                            Service = "6-8 Kişilik",
                            Url = "kurban-eti-kavurmasi"
                        },
                        new
                        {
                            Id = 2,
                            BakingTime = "20 Dk",
                            CatId = 1,
                            Clue = "*Baharat oranlarını damak zevkinize göre ayarlayabilirsiniz.",
                            ImageUrl = "renklimakarna.jpeg",
                            IsApproved = false,
                            IsHome = false,
                            Name = "Renkli Soğuk Makarna",
                            Preparation = "1\r\nHaşlanmış makarnayı geniş bir karıştırma kabına alın.\r\n2\r\nKıyılmış maydanozu, doğranmış avokadoyu, ikiye bölünmüş çeri domatesleri ve geri kalan tüm malzemeleri ekleyip güzelce karıştırın.\r\n3\r\nSon olarak toz baharatlarla lezzetlendirip servis edin. Afiyet olsun.",
                            PreparationTime = "30 Dk",
                            Repice = "200 g haşlanmış renkli makarna\r\n1/4 demet kıyılmış maydanoz\r\n1 adet olgun avokado\r\n4-5 adet çeri domates\r\n100 g top peynir\r\n20 g konserve mısır\r\n20 g dilim zeytin\r\n10 g Hardal\r\n15 g bal\r\nkırmızı toz biber\r\ntuz\r\nkekik",
                            Service = "2 Kişilik",
                            Url = "renkli-makarna"
                        });
                });

            modelBuilder.Entity("DiariesFood.Entity.Concrete.FoodCategory", b =>
                {
                    b.Property<int>("FoodId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.HasKey("FoodId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("FoodCategory", (string)null);

                    b.HasData(
                        new
                        {
                            FoodId = 1,
                            CategoryId = 1
                        },
                        new
                        {
                            FoodId = 2,
                            CategoryId = 3
                        });
                });

            modelBuilder.Entity("DiariesFood.Entity.Concrete.Identity.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "feacd8f6-1bd2-4eed-babb-bca104ede603",
                            Description = "Admin Rolü",
                            Name = "Admin",
                            NormalizedName = "ADMİN"
                        },
                        new
                        {
                            Id = "c99ed418-a56f-4b04-b29e-4a7a4fe6e556",
                            Description = "User Rolü",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("DiariesFood.Entity.Concrete.Identity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "847c7a42-4720-4ade-ac48-c455ccb61e09",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "85c1ff69-c3e7-4bd1-8198-f620424d4f8d",
                            DateOfBirth = new DateTime(1980, 7, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Sümeyye",
                            Gender = "Kadın",
                            LastName = "Yüce",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAELTyaUTdRLPJMXHiSwsMfC3vE7xDZ3yt7+GeEmfk5Oths+KKZctx1iprYteTFoMnuw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "49505cda-4bda-48d0-8867-14aba11845a1",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "e76c39fd-3963-4d01-bb75-306a486d613e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3bef7c30-be63-4453-beb3-fa160d50fb8d",
                            DateOfBirth = new DateTime(1986, 7, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ornek",
                            Gender = "Erkek",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@GMAIL.COM",
                            NormalizedUserName = "USER",
                            PasswordHash = "AQAAAAIAAYagAAAAECTQo4OHa/+Im/cyHjcpPW/WS9Ag+OkKuUthTB7rQ3CW3gIe0KAz+ZFPrf1czEi6Aw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6aa2d2e3-eb79-4fe5-ac88-bf336fa4029b",
                            TwoFactorEnabled = false,
                            UserName = "user"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "847c7a42-4720-4ade-ac48-c455ccb61e09",
                            RoleId = "feacd8f6-1bd2-4eed-babb-bca104ede603"
                        },
                        new
                        {
                            UserId = "e76c39fd-3963-4d01-bb75-306a486d613e",
                            RoleId = "c99ed418-a56f-4b04-b29e-4a7a4fe6e556"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DiariesFood.Entity.Concrete.Favorite", b =>
                {
                    b.HasOne("DiariesFood.Entity.Concrete.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DiariesFood.Entity.Concrete.FavoriteItem", b =>
                {
                    b.HasOne("DiariesFood.Entity.Concrete.Favorite", "Favorite")
                        .WithMany("FavoriteItems")
                        .HasForeignKey("FavoriteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiariesFood.Entity.Concrete.Food", "Food")
                        .WithMany()
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Favorite");

                    b.Navigation("Food");
                });

            modelBuilder.Entity("DiariesFood.Entity.Concrete.FoodCategory", b =>
                {
                    b.HasOne("DiariesFood.Entity.Concrete.Category", "Category")
                        .WithMany("FoodCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiariesFood.Entity.Concrete.Food", "Food")
                        .WithMany("FoodCategories")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Food");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("DiariesFood.Entity.Concrete.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DiariesFood.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DiariesFood.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("DiariesFood.Entity.Concrete.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiariesFood.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DiariesFood.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DiariesFood.Entity.Concrete.Category", b =>
                {
                    b.Navigation("FoodCategories");
                });

            modelBuilder.Entity("DiariesFood.Entity.Concrete.Favorite", b =>
                {
                    b.Navigation("FavoriteItems");
                });

            modelBuilder.Entity("DiariesFood.Entity.Concrete.Food", b =>
                {
                    b.Navigation("FoodCategories");
                });
#pragma warning restore 612, 618
        }
    }
}
